{
    "topic_description": "novel prompting methods for large language models to improve mathematical problem solving",
    "idea_name": "Adaptive Granularity Prompting",
    "raw_idea": {
        "Problem": "Current prompting methods for mathematical problem solving often use a fixed level of granularity for the reasoning steps, which may be suboptimal for problems of varying complexity.",
        "Existing Methods": "Chain-of-thought prompting and its variants typically use a fixed template for eliciting reasoning steps, such as 'Let's solve this step-by-step'.",
        "Motivation": "Different mathematical problems require different levels of detail in their solution steps. Simple problems may be solved with high-level steps, while complex problems may need fine-grained, low-level steps. Dynamically adapting the granularity of the reasoning steps to the problem complexity could lead to more efficient and accurate solutions.",
        "Proposed Method": "We propose Adaptive Granularity Prompting (AGP), a method that dynamically adjusts the level of detail in the reasoning steps based on the problem complexity. The prompt includes instructions like: '1) Assess the complexity of the problem on a scale from 1 (very simple) to 5 (very complex). 2) If the complexity is 1-2, generate high-level reasoning steps. If the complexity is 3-5, generate detailed, low-level reasoning steps. 3) Solve the problem using the appropriate level of granularity in your reasoning steps.' By adaptively selecting the granularity of the reasoning steps, AGP can generate more efficient and accurate solutions.",
        "Experiment Plan": "We will evaluate AGP on mathematical reasoning benchmarks like GSM8K and MATH, comparing its performance to fixed-granularity baselines like chain-of-thought prompting. We will also analyze the relationship between problem complexity and the granularity of the generated reasoning steps, and conduct user studies to assess the clarity and helpfulness of the adaptive explanations."
    },
    "full_experiment_plan": {
        "Title": "Adaptive Granularity Prompting: Dynamically Adjusting Reasoning Step Granularity for Mathematical Problem Solving",
        "Problem Statement": "Current prompting methods for mathematical problem solving often use a fixed level of granularity for the reasoning steps, which may be suboptimal for problems of varying complexity.",
        "Motivation": "Chain-of-thought prompting and its variants typically use a fixed template for eliciting reasoning steps, such as 'Let's solve this step-by-step'. However, different mathematical problems require different levels of detail in their solution steps. Simple problems may be solved with high-level steps, while complex problems may need fine-grained, low-level steps. Dynamically adapting the granularity of the reasoning steps to the problem complexity could lead to more efficient and accurate solutions.",
        "Proposed Method": "We propose Adaptive Granularity Prompting (AGP), a method that dynamically adjusts the level of detail in the reasoning steps based on the problem complexity. The prompt includes instructions like: '1) Assess the complexity of the problem on a scale from 1 (very simple) to 5 (very complex). 2) If the complexity is 1-2, generate high-level reasoning steps. If the complexity is 3-5, generate detailed, low-level reasoning steps. 3) Solve the problem using the appropriate level of granularity in your reasoning steps.' By adaptively selecting the granularity of the reasoning steps, AGP can generate more efficient and accurate solutions.",
        "Step-by-Step Experiment Plan": {
            "Step 1: Gather Datasets": "We will use the GSM8K and MATH datasets for evaluating mathematical reasoning performance. These datasets contain a diverse set of mathematical word problems of varying complexity levels.",
            "Step 2: Construct Prompts": "We will compare AGP to two baselines: 1) Direct prompting (no reasoning steps), and 2) Fixed-granularity chain-of-thought prompting (e.g., 'Let's solve this step-by-step'). For AGP, the prompt will be: 'Assess the complexity of the problem on a scale from 1 (very simple) to 5 (very complex). If the complexity is 1-2, generate high-level reasoning steps. If the complexity is 3-5, generate detailed, low-level reasoning steps. Solve the problem using the appropriate level of granularity in your reasoning steps.'",
            "Step 3: Select Models": "We will use GPT-3.5 (text-davinci-003) and GPT-4 via the OpenAI API to test the prompts. These large language models have shown strong performance on mathematical reasoning tasks.",
            "Step 4: Get Results": "For each dataset and model, we will generate solutions using the baseline prompts and AGP. We will calculate the accuracy of the final answers as well as other metrics like average number of reasoning steps and solution length.",
            "Step 5: Analyze Results": "We will compare the performance of AGP to the baselines in terms of accuracy and efficiency (e.g., number of reasoning steps). We will also qualitatively analyze the generated reasoning steps to assess their appropriateness for the problem complexity. Statistical significance tests will be conducted to verify the improvements."
        },
        "Test Case Examples": {
            "Baseline Prompt Input (Direct)": "Natalia sold clips to 48 of her friends in April, and then she sold half as many clips in May. How many clips did Natalia sell altogether in April and May?",
            "Baseline Prompt Expected Output (Direct)": "72 clips",
            "Baseline Prompt Input (Fixed-Granularity CoT)": "Natalia sold clips to 48 of her friends in April, and then she sold half as many clips in May. How many clips did Natalia sell altogether in April and May? Let's solve this step-by-step.",
            "Baseline Prompt Expected Output (Fixed-Granularity CoT)": "Given:\n- Natalia sold clips to 48 of her friends in April\n- In May, she sold half as many clips as in April\n\nStep 1: Calculate the number of clips Natalia sold in May.\nMay clips = 1/2 \u00d7 April clips\n            = 1/2 \u00d7 48\n            = 24\n\nStep 2: Calculate the total number of clips sold in April and May.\nTotal clips = April clips + May clips\n            = 48 + 24\n            = 72\n\nTherefore, Natalia sold a total of 72 clips in April and May.",
            "Proposed Prompt Input (AGP)": "Natalia sold clips to 48 of her friends in April, and then she sold half as many clips in May. How many clips did Natalia sell altogether in April and May?\n\nAssess the complexity of the problem on a scale from 1 (very simple) to 5 (very complex). If the complexity is 1-2, generate high-level reasoning steps. If the complexity is 3-5, generate detailed, low-level reasoning steps. Solve the problem using the appropriate level of granularity in your reasoning steps.",
            "Proposed Prompt Expected Output (AGP)": "Complexity: 2 (simple)\n\nHigh-level reasoning steps:\n1. Find the number of clips sold in May (half of April sales)\n2. Add April and May sales to get the total\n\nSolution:\n1. May sales = 1/2 \u00d7 48 = 24 clips\n2. Total sales = 48 + 24 = 72 clips\n\nNatalia sold a total of 72 clips in April and May.",
            "Explanation": "The proposed AGP method first assesses the problem complexity and determines that high-level reasoning steps are sufficient for this simple problem. It then generates a concise solution with just the essential steps. In contrast, the fixed-granularity CoT prompting generates unnecessarily detailed steps for this simple problem, which may be less efficient."
        },
        "Fallback Plan": "If AGP does not outperform the baselines, we will conduct additional analyses to understand why. We will examine the relationship between the assessed problem complexity and the actual problem difficulty to see if the model is accurately gauging complexity. We will also analyze cases where the generated reasoning steps are not well-aligned with the assessed complexity. Based on these insights, we can propose improvements to the complexity assessment and granularity selection components of AGP. If the results are still not satisfactory, we can pivot to an analysis paper that investigates the challenges of dynamically adapting reasoning granularity in mathematical problem solving and provides insights for future work in this direction."
    }
}