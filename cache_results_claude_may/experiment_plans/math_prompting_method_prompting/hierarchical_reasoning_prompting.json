{
    "topic_description": "novel prompting methods for large language models to improve mathematical problem solving",
    "idea_name": "Hierarchical Reasoning Prompting",
    "raw_idea": {
        "Problem": "Solving complex mathematical reasoning problems with multiple subproblems using a flat chain-of-thought often leads to convoluted and error-prone solution steps.",
        "Existing Methods": "Current approaches use a linear chain-of-thought prompting that generates a single sequence of reasoning steps to arrive at the final answer.",
        "Motivation": "Many complex problems can be naturally divided into a hierarchy of smaller subproblems. Humans often approach such problems by recursively breaking them down and solving the subproblems, and then composing the subsolutions to obtain the final solution. Large language models can be prompted to follow a similar hierarchical problem-solving strategy.",
        "Proposed Method": "We propose Hierarchical Reasoning Prompting (HRP), where the model is prompted to: 1) Analyze the problem to identify the main question and any prerequisite subproblems that need to be solved. 2) Recursively apply step 1 to break down each subproblem into smaller subproblems until each subproblem can be directly solved. 3) Generate a solution for each leaf subproblem. 4) Recursively compose the subsolutions to solve the higher-level subproblems and finally the main problem. The prompts will guide the model to follow this hierarchical reasoning process.",
        "Experiment Plan": "Evaluate HRP on the MultiArith and GSM-HARD benchmarks that involve compositional subproblems. Compare to flat chain-of-thought prompting and least-to-most prompting. Analyze the generated reasoning hierarchies."
    },
    "full_experiment_plan": {
        "Title": "Hierarchical Reasoning Prompting: Guiding Large Language Models to Solve Complex Problems via Recursive Problem Decomposition",
        "Problem Statement": "Solving complex mathematical reasoning problems with multiple subproblems using a flat chain-of-thought often leads to convoluted and error-prone solution steps. We aim to explore whether large language models can be prompted to perform hierarchical problem decomposition and reasoning to more effectively solve such problems.",
        "Motivation": "Many complex problems can be naturally divided into a hierarchy of smaller subproblems. Humans often approach such problems by recursively breaking them down and solving the subproblems, and then composing the subsolutions to obtain the final solution. In contrast, current chain-of-thought prompting approaches for language models use a linear reasoning process, generating a single flat sequence of reasoning steps to arrive at the final answer. This can lead to convoluted and error-prone solutions for problems with multiple parts. We hypothesize that large language models have the capability to perform recursive problem decomposition and hierarchical reasoning, more similar to human problem-solving, if given suitable prompts that guide them to do so.",
        "Proposed Method": "We propose Hierarchical Reasoning Prompting (HRP), where the model is prompted to: 1) Analyze the problem to identify the main question and any prerequisite subproblems that need to be solved. 2) Recursively apply step 1 to break down each subproblem into smaller subproblems until each subproblem can be directly solved. 3) Generate a solution for each leaf subproblem. 4) Recursively compose the subsolutions to solve the higher-level subproblems and finally the main problem. The prompts will guide the model to follow this hierarchical reasoning process.",
        "Step-by-Step Experiment Plan": {
            "Step 1: Gather Datasets": "Evaluate HRP on the MultiArith and GSM-HARD datasets, which involve complex mathematical problems that are composed of multiple subproblems. These datasets are suitable for testing hierarchical reasoning capabilities.",
            "Step 2: Construct Prompts": "We compare three prompting methods: 1) Direct: Prompt the model with the question directly. 2) Flat CoT: Prompt the model to generate a flat chain-of-thought reasoning before giving the final answer. 3) HRP (ours): Prompt the model to perform recursive problem decomposition and hierarchical reasoning. The key components of the HRP prompt are:\n- Analyze the problem to identify the main question and subproblems.\n- Recursively break down each subproblem.\n- Solve each leaf subproblem.\n- Recursively compose subsolutions.\nWe design a prompt template that guides the model through these steps. For example:\n\nQuestion: [Q]\n\nLet's break this down step-by-step:\n1) Identify the main question and subproblems:\n[M generates main question and list of subproblems]\n\n2) For each subproblem, identify if it can be solved directly. If not, break it down further:\n[M recursively decomposes each subproblem]\n\n3) Solve each leaf subproblem:\n[M generates solution for each leaf subproblem]\n\n4) Compose the subsolutions to solve the higher-level subproblems and main question:\n[M recursively composes subsolutions]\n\nTherefore, the final answer is: [M generates final answer]",
            "Step 3: Select Models": "Evaluate the prompting methods on GPT-3.5 (text-davinci-002), GPT-4, and PaLM 540B to test the effectiveness of HRP across different models.",
            "Step 4: Run Experiments": "For each dataset and model combination, generate predicted answers using the three prompting methods.",
            "Step 5: Evaluate Results": "Compute the answer accuracy of each prompting method. Analyze the error cases to understand the failure modes. Qualitatively examine the generated reasoning hierarchies to verify that HRP is effective at guiding the models to perform meaningful problem decomposition and hierarchical reasoning."
        },
        "Test Case Examples": {
            "Example 1": {
                "Question": "A factory produces 1200 cans of soda per hour. The cans are packed into boxes of 24 cans each. The boxes are then packed into crates that hold 20 boxes each. How many crates can be filled in 5 hours?",
                "Direct Prompt": "A factory produces 1200 cans of soda per hour. The cans are packed into boxes of 24 cans each. The boxes are then packed into crates that hold 20 boxes each. How many crates can be filled in 5 hours?",
                "Direct Output": "The factory produces 1200 cans per hour. In 5 hours, it will produce 1200 * 5 = 6000 cans. Each box holds 24 cans, so 6000 cans will fill 6000 / 24 = 250 boxes. Each crate holds 20 boxes, so 250 boxes will fill 250 / 20 = 12.5 crates. Since we can only fill whole crates, the answer is 12 crates.",
                "Flat CoT Prompt": "A factory produces 1200 cans of soda per hour. The cans are packed into boxes of 24 cans each. The boxes are then packed into crates that hold 20 boxes each. How many crates can be filled in 5 hours?\n\nLet's solve this step by step:",
                "Flat CoT Output": "1) Calculate the number of cans produced in 5 hours:\n1200 cans/hour * 5 hours = 6000 cans\n\n2) Calculate the number of boxes filled with 6000 cans:\n6000 cans / 24 cans/box = 250 boxes\n\n3) Calculate the number of crates filled with 250 boxes:\n250 boxes / 20 boxes/crate = 12.5 crates\n\n4) Round down to the nearest whole number of crates:\n12.5 crates rounded down is 12 crates\n\nTherefore, in 5 hours, 12 crates can be filled.",
                "HRP Prompt": "A factory produces 1200 cans of soda per hour. The cans are packed into boxes of 24 cans each. The boxes are then packed into crates that hold 20 boxes each. How many crates can be filled in 5 hours?\n\nLet's break this down step-by-step:\n1) Identify the main question and subproblems:",
                "HRP Output": "Main question: How many crates can be filled in 5 hours?\n\nSubproblems:\n- Find the number of cans produced in 5 hours\n- Find the number of boxes that can be filled with those cans\n- Find the number of crates that can be filled with those boxes\n\n2) For each subproblem, identify if it can be solved directly. If not, break it down further:\n\nSubproblem 1: Find the number of cans produced in 5 hours\n- Can be solved directly using the given production rate\n\nSubproblem 2: Find the number of boxes that can be filled with those cans\n- Requires the solution from subproblem 1\n- Can be solved directly using the number of cans per box\n\nSubproblem 3: Find the number of crates that can be filled with those boxes\n- Requires the solution from subproblem 2\n- Can be solved directly using the number of boxes per crate\n\n3) Solve each leaf subproblem:\n\nSubproblem 1 solution:\n- Production rate: 1200 cans/hour\n- Time: 5 hours\n- Number of cans produced: 1200 * 5 = 6000 cans\n\nSubproblem 2 solution:\n- Number of cans: 6000 (from subproblem 1)\n- Cans per box: 24\n- Number of boxes: 6000 / 24 = 250 boxes\n\nSubproblem 3 solution:\n- Number of boxes: 250 (from subproblem 2)\n- Boxes per crate: 20\n- Number of crates: 250 / 20 = 12.5\n- Rounding down: 12 crates\n\n4) Compose the subsolutions to solve the higher-level subproblems and main question:\n\nMain question answer:\n- In 5 hours, the factory can produce 6000 cans (subproblem 1)\n- These cans can fill 250 boxes (subproblem 2)\n- These boxes can fill 12 crates (subproblem 3)\n\nTherefore, the final answer is: In 5 hours, 12 crates can be filled.",
                "Explanation": "The HRP output breaks down the problem into a clear hierarchy of subproblems, solves each subproblem systematically, and composes the subsolutions to arrive at the final answer. This structured reasoning is easier to follow and less error-prone compared to the flat chain-of-thought reasoning."
            },
            "Example 2": {
                "Question": "A school is organizing a field trip and needs to rent buses. Each bus can hold 48 people. There are 140 students and 12 teachers going on the trip. How many buses will the school need to rent so that each bus is filled to capacity?",
                "Direct Prompt": "A school is organizing a field trip and needs to rent buses. Each bus can hold 48 people. There are 140 students and 12 teachers going on the trip. How many buses will the school need to rent so that each bus is filled to capacity?",
                "Direct Output": "There are 140 students and 12 teachers, so in total there are 152 people going on the trip. Each bus can hold 48 people. To calculate the number of buses needed, divide 152 by 48: 152 / 48 = 3.17. Since 3.17 buses are needed and we can only rent whole buses, the school will need to rent 4 buses to have enough capacity for everyone.",
                "Flat CoT Prompt": "A school is organizing a field trip and needs to rent buses. Each bus can hold 48 people. There are 140 students and 12 teachers going on the trip. How many buses will the school need to rent so that each bus is filled to capacity?\n\nLet's solve this step by step:",
                "Flat CoT Output": "1) Add the number of students and teachers to get the total number of people going on the trip:\n140 students + 12 teachers = 152 people\n\n2) Divide the total number of people by the capacity of each bus:\n152 people / 48 people per bus = 3.17 buses\n\n3) Round up to the nearest whole number of buses, since we can only rent whole buses:\n3.17 buses rounded up is 4 buses\n\nTherefore, the school will need to rent 4 buses so that each bus is filled to capacity.",
                "HRP Prompt": "A school is organizing a field trip and needs to rent buses. Each bus can hold 48 people. There are 140 students and 12 teachers going on the trip. How many buses will the school need to rent so that each bus is filled to capacity?\n\nLet's break this down step-by-step:\n1) Identify the main question and subproblems:",
                "HRP Output": "Main question: How many buses will the school need to rent so that each bus is filled to capacity?\n\nSubproblems:\n- Find the total number of people going on the trip\n- Find the number of buses needed to hold all the people\n\n2) For each subproblem, identify if it can be solved directly. If not, break it down further:\n\nSubproblem 1: Find the total number of people going on the trip\n- Requires adding the number of students and teachers\n- Can be solved directly using the given information\n\nSubproblem 2: Find the number of buses needed to hold all the people\n- Requires the solution from subproblem 1\n- Requires dividing the total number of people by the bus capacity\n- Requires rounding up to the nearest whole number\n\n3) Solve each leaf subproblem:\n\nSubproblem 1 solution:\n- Number of students: 140\n- Number of teachers: 12\n- Total number of people: 140 + 12 = 152\n\nSubproblem 2 solution:\n- Total number of people: 152 (from subproblem 1)\n- Bus capacity: 48\n- Number of buses needed: 152 / 48 = 3.17\n- Rounding up: 4 buses\n\n4) Compose the subsolutions to solve the higher-level subproblems and main question:\n\nMain question answer:\n- There are 152 people going on the trip in total (subproblem 1)\n- To hold 152 people with buses of capacity 48, 4 buses are needed (subproblem 2)\n\nTherefore, the final answer is: The school will need to rent 4 buses so that each bus is filled to capacity.",
                "Explanation": "The HRP output clearly identifies the main question and the necessary subproblems. It then solves each subproblem in a logical order, using the solutions of previous subproblems as needed. Finally, it composes the subsolutions to answer the main question. This structured approach leads to a more organized and easier-to-follow solution compared to the flat reasoning outputs."
            }
        },
        "Fallback Plan": "If the HRP method does not outperform the baselines, we can analyze the generated reasoning hierarchies to understand why. Potential issues could be: 1) The model fails to identify the correct subproblems. 2) The model fails to solve the leaf subproblems correctly. 3) The model fails to compose the subsolutions correctly. Based on the analysis, we can try to improve the prompt template to better guide the model at the failed steps. If the HRP method still does not work well after prompt iteration, we can turn the project into an analysis of the model's capabilities and limitations in hierarchical reasoning. The generated reasoning hierarchies can provide insights into what the model can and cannot do in terms of problem decomposition and composition. We can also compare the reasoning hierarchies generated by different models to see if more advanced models are better at this task. The analysis can shed light on the current state of hierarchical reasoning in language models and point to future directions for improvement."
    }
}