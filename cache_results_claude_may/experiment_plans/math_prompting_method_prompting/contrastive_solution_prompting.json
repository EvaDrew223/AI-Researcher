{
    "topic_description": "novel prompting methods for large language models to improve mathematical problem solving",
    "idea_name": "Contrastive Solution Prompting",
    "raw_idea": {
        "Problem": "Large language models often struggle to generate precise and accurate solutions to complex mathematical problems, even when prompted with relevant examples or reasoning steps.",
        "Existing Methods": "Current approaches include chain-of-thought prompting, which provides step-by-step reasoning examples, and self-consistency, which samples multiple reasoning paths and selects the most consistent answer.",
        "Motivation": "Humans often learn by contrasting correct and incorrect solutions to a problem. By analyzing the differences between them, they can identify key principles and avoid common pitfalls. We hypothesize that prompting LLMs to generate both correct and incorrect solutions, and then analyze their differences, can improve their mathematical problem-solving abilities.",
        "Proposed Method": "We propose Contrastive Solution Prompting (CSP), a novel prompting method that guides LLMs to generate paired correct and incorrect solutions for each problem. The prompt includes instructions like: '1) Generate a correct solution to the problem, showing your reasoning step-by-step. 2) Generate an incorrect solution to the problem, also showing your reasoning step-by-step. 3) Analyze the key differences between the correct and incorrect solutions, highlighting where the incorrect solution went wrong.' By generating and contrasting solution pairs, the LLM can learn to identify and avoid common mistakes.",
        "Experiment Plan": "We will evaluate CSP on standard mathematical reasoning benchmarks like GSM8K and MATH. We will compare its performance to baselines such as chain-of-thought prompting and self-consistency. We will also conduct ablation studies to assess the importance of generating both correct and incorrect solutions, as well as the impact of the contrastive analysis step."
    },
    "full_experiment_plan": {
        "Title": "Contrastive Solution Prompting: Improving Mathematical Problem Solving in Large Language Models",
        "Problem Statement": "Large language models often struggle to generate precise and accurate solutions to complex mathematical problems, even when prompted with relevant examples or reasoning steps.",
        "Motivation": "Current approaches like chain-of-thought prompting and self-consistency have shown promise in improving LLMs' mathematical problem-solving abilities. However, they do not fully leverage the human-like learning strategy of contrasting correct and incorrect solutions to identify key principles and avoid common pitfalls. We hypothesize that prompting LLMs to generate paired correct and incorrect solutions, and then analyze their differences, can further enhance their performance on mathematical reasoning tasks.",
        "Proposed Method": "We propose Contrastive Solution Prompting (CSP), a novel prompting method that guides LLMs to generate paired correct and incorrect solutions for each problem. The prompt includes instructions like: '1) Generate a correct solution to the problem, showing your reasoning step-by-step. 2) Generate an incorrect solution to the problem, also showing your reasoning step-by-step. 3) Analyze the key differences between the correct and incorrect solutions, highlighting where the incorrect solution went wrong.' By generating and contrasting solution pairs, the LLM can learn to identify and avoid common mistakes.",
        "Step-by-Step Experiment Plan": {
            "Step 1: Gather Datasets": "Evaluate CSP on standard mathematical reasoning benchmarks: GSM8K and MATH. Use answer accuracy as the main metric.",
            "Step 2: Construct Prompts": "1) Baseline prompts: a) Direct prompting (only the question), b) Chain-of-thought prompting (append 'Let's solve this step-by-step:' to the question), c) Self-consistency (sample multiple reasoning paths and select the most consistent answer).\n2) CSP prompt (for each question): '1) Generate a correct solution to the problem, showing your reasoning step-by-step. 2) Generate an incorrect solution to the problem, also showing your reasoning step-by-step. 3) Analyze the key differences between the correct and incorrect solutions, highlighting where the incorrect solution went wrong. 4) Based on the analysis, provide the final answer to the original question.'",
            "Step 3: Select Models": "Evaluate on GPT-3.5 (text-davinci-003), GPT-4, and PaLM (if API access is available). If not, use open-source models like Llama or Alpaca.",
            "Step 4: Get Results": "For each dataset and model combination: 1) Obtain baseline results using the baseline prompts. 2) Obtain CSP results using the CSP prompt. 3) Record the answer accuracy for each setting.",
            "Step 5: Analyze Results": "1) Compare the performance of CSP against the baselines for each model and dataset. 2) Conduct statistical significance tests to verify if the improvements are significant. 3) Analyze the generated correct and incorrect solutions, as well as the contrastive analysis, to gain insights into how CSP helps the models improve."
        },
        "Test Case Examples": {
            "Baseline Prompt Input (Direct)": "A factory has 1020 workers who work 8-hour shifts. If each worker produces 15 units per hour, what is the total number of units produced in 3 shifts?",
            "Baseline Prompt Expected Output (Direct)": "The total number of units produced in 3 shifts is 367,200.",
            "Baseline Prompt Input (Chain-of-Thought)": "A factory has 1020 workers who work 8-hour shifts. If each worker produces 15 units per hour, what is the total number of units produced in 3 shifts? Let's solve this step-by-step:",
            "Baseline Prompt Expected Output (Chain-of-Thought)": "Given:\n- 1020 workers\n- 8-hour shifts\n- Each worker produces 15 units per hour\n- We need to find the total units produced in 3 shifts\n\nStep 1: Calculate the number of units produced by one worker in one shift.\nUnits per worker per shift = Units per hour \u00d7 Hours per shift\n                            = 15 \u00d7 8\n                            = 120 units\n\nStep 2: Calculate the total number of units produced by all workers in one shift.\nTotal units per shift = Units per worker per shift \u00d7 Number of workers\n                      = 120 \u00d7 1020\n                      = 122,400 units\n\nStep 3: Calculate the total number of units produced in 3 shifts.\nTotal units in 3 shifts = Total units per shift \u00d7 Number of shifts\n                        = 122,400 \u00d7 3\n                        = 367,200 units\n\nTherefore, the total number of units produced in 3 shifts is 367,200.",
            "Proposed Prompt Input (CSP)": "A factory has 1020 workers who work 8-hour shifts. If each worker produces 15 units per hour, what is the total number of units produced in 3 shifts?\n\n1) Generate a correct solution to the problem, showing your reasoning step-by-step.\n2) Generate an incorrect solution to the problem, also showing your reasoning step-by-step.\n3) Analyze the key differences between the correct and incorrect solutions, highlighting where the incorrect solution went wrong.\n4) Based on the analysis, provide the final answer to the original question.",
            "Proposed Prompt Expected Output (CSP)": "Correct Solution:\nGiven:\n- 1020 workers\n- 8-hour shifts\n- Each worker produces 15 units per hour\n- We need to find the total units produced in 3 shifts\n\nStep 1: Calculate the number of units produced by one worker in one shift.\nUnits per worker per shift = Units per hour \u00d7 Hours per shift\n                            = 15 \u00d7 8\n                            = 120 units\n\nStep 2: Calculate the total number of units produced by all workers in one shift.\nTotal units per shift = Units per worker per shift \u00d7 Number of workers\n                      = 120 \u00d7 1020\n                      = 122,400 units\n\nStep 3: Calculate the total number of units produced in 3 shifts.\nTotal units in 3 shifts = Total units per shift \u00d7 Number of shifts\n                        = 122,400 \u00d7 3\n                        = 367,200 units\n\nTherefore, the total number of units produced in 3 shifts is 367,200.\n\nIncorrect Solution:\nGiven:\n- 1020 workers\n- 8-hour shifts\n- Each worker produces 15 units per hour\n- We need to find the total units produced in 3 shifts\n\nStep 1: Calculate the number of units produced by one worker in one shift.\nUnits per worker per shift = Units per hour \u00d7 Hours per shift\n                            = 15 \u00d7 8\n                            = 120 units\n\nStep 2: Calculate the total number of units produced by all workers in 3 shifts.\nTotal units in 3 shifts = Units per worker per shift \u00d7 Number of workers \u00d7 Number of shifts\n                        = 120 \u00d7 1020 \u00d7 3\n                        = 367,200 units\n\nTherefore, the total number of units produced in 3 shifts is 367,200.\n\nAnalysis:\nThe incorrect solution makes the mistake of multiplying the units per worker per shift by both the number of workers and the number of shifts in a single step. This double-counts the number of shifts.\n\nThe correct solution first calculates the total units produced by all workers in a single shift and then multiplies that result by the number of shifts to get the total units produced in 3 shifts.\n\nFinal Answer:\nBased on the analysis, the correct answer is that the total number of units produced in 3 shifts is 367,200.",
            "Explanation": "The proposed CSP method guides the model to generate both correct and incorrect solutions, and then analyze the differences between them. This helps the model identify the key mistake in the incorrect solution (double-counting the number of shifts) and reinforce the correct problem-solving steps. By contrasting the solutions, the model can learn to avoid common pitfalls and generate more accurate answers."
        },
        "Fallback Plan": "If the proposed CSP method does not significantly outperform the baselines, we can conduct the following additional analyses:\n1) Examine the quality of the generated correct and incorrect solutions to see if they are sufficiently diverse and representative of common mistakes.\n2) Evaluate the relevance and clarity of the contrastive analysis step to see if it effectively identifies the key differences between the solutions.\n3) Experiment with variations of the CSP prompt, such as providing more explicit guidance on the types of mistakes to generate in the incorrect solutions.\n4) Conduct error analysis to identify specific types of problems where CSP struggles and propose targeted improvements.\n\nIf the results still do not show significant improvements, we can pivot the project to focus on understanding the limitations of contrastive prompting for mathematical problem-solving. This could involve:\n1) Comparing the performance of CSP across different problem types and difficulty levels to identify where it is most effective.\n2) Analyzing the types of mistakes that CSP fails to correct and proposing alternative prompting strategies to address them.\n3) Investigating the impact of model size and architecture on the effectiveness of CSP.\n4) Exploring the combination of CSP with other prompting techniques, such as chain-of-thought or self-consistency, to see if they can complement each other."
    }
}